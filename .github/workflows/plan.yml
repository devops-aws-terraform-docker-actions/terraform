name: Terraform Plan on Pull Request test test

on:
  pull_request:
    branches:
      - '**'
    paths:
      - '*/**.tf'  # Any Terraform file in any subdirectory
      - '*/**.tfvars'  # Any Terraform state file in any subdirectory
      - '.github/workflows/plan.yml'
    types: [opened, synchronize, reopened]

env:
  TF_VERSION: '1.5.7'  # Specify Terraform version
  AWS_REGION: 'us-east-1'  # Update with your AWS region

jobs:
  detect-changed-dirs:
    name: 'Detect Changed Directories'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
        
      - name: Find changed directories
        id: changed-directories
        run: |
          # Get list of all changed files in the PR
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.tf$' || echo "")
          
          # Extract unique directories that contain Terraform files
          DIRS=$(echo "$CHANGED_FILES" | xargs -I{} dirname {} | sort -u | grep -v "^\.$" || echo "")
          echo "Changed directories with Terraform files: $DIRS"
          echo "DIRS=$DIRS" >> $GITHUB_ENV
          
      - name: Set matrix
        id: set-matrix
        run: |
          # Convert list of directories to JSON array for matrix
          DIRS_JSON="["
          for dir in $DIRS; do
            if [ -n "$DIRS_JSON" ] && [ "$DIRS_JSON" != "[" ]; then
              DIRS_JSON="$DIRS_JSON,"
            fi
            DIRS_JSON="$DIRS_JSON\"$dir\""
          done
          DIRS_JSON="$DIRS_JSON]"
          
          # If no directories found, add empty placeholder to avoid workflow failures
          if [ "$DIRS_JSON" == "[]" ]; then
            DIRS_JSON="[\"none\"]"
          fi
          
          echo "matrix=$DIRS_JSON" >> $GITHUB_OUTPUT
          echo "Matrix: $DIRS_JSON"

  terraform-plan:
    name: 'Terraform Plan: ${{ matrix.directory }}'
    needs: detect-changed-dirs
    if: needs.detect-changed-dirs.outputs.matrix != '[\"none\"]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.detect-changed-dirs.outputs.matrix) }}
    
    steps:
      - name: Skip if directory is 'none'
        if: matrix.directory == 'none'
        run: echo "No Terraform directories changed, skipping" && exit 0

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          cd ${{ matrix.directory }}
          terraform init

      - name: Terraform Format
        run: |
          cd ${{ matrix.directory }}
          terraform fmt -check || true

      - name: Terraform Validate
        run: |
          cd ${{ matrix.directory }}
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ matrix.directory }}
          # Create plan output file
          terraform plan -no-color -out=tfplan 2>&1 | tee plan_output.txt
          
          # Export plan output to GitHub step summary
          echo "## Terraform Plan for ${{ matrix.directory }}" >> $GITHUB_STEP_SUMMARY
          echo '```hcl' >> $GITHUB_STEP_SUMMARY
          cat plan_output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Post Plan to PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
          DIRECTORY: "${{ matrix.directory }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('${{ matrix.directory }}/plan_output.txt', 'utf8');
            
            // Limit comment size if needed
            const maxLength = 65000; // GitHub has a comment size limit
            let planSummary = planOutput;
            if (planOutput.length > maxLength) {
              planSummary = planOutput.substring(0, maxLength) + "\n\n... Output truncated due to size ...";
            }
            
            const comment = `## Terraform Plan for \`${process.env.DIRECTORY}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${planSummary}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })